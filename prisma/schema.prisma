generator client {
  provider      = "prisma-client-js"
  output        = "../node_modules/.prisma/client"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                  String                   @id
  name                String?
  email               String?                  @unique
  emailVerified       DateTime?
  image               String?
  googleAccountId     String?                  @unique
  googleSheetId       String?                  @unique
  driveFolderId       String?
  userAppsScriptId    String?                  @unique
  createdAt           DateTime                 @default(now())
  updatedAt           DateTime                 @updatedAt
  accounts            Account[]
  marketplaceConfigs  MarketplaceConfig[]
  orders              Order[]
  products            Product[]
  sessions            Session[]
  shipperProfile      ShipperProfile?
  integrationSettings UserIntegrationSettings?
}

model OrderShipping {
  id           String   @id @default(cuid())
  orderId      String   @unique
  firstName    String
  lastName     String?
  company      String?
  street1      String
  street2      String?
  city         String
  state        String?
  postalCode   String
  countryCode  String
  phone        String
  insertedAt   DateTime @default(now())
  updatedAt    DateTime @updatedAt

  order        Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model MarketplaceConfig {
  id        String   @id @default(cuid())
  userId    String
  name      String
  config    Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Order {
  id                String      @id @default(cuid())
  userId            String
  marketplace       String
  marketplaceKey    String
  orderNumber       String?
  marketplaceCreatedAt DateTime?
  customerName      String?
  status            String
  shipByDate        DateTime?
  currency          String?
  totalPrice        Decimal?    @db.Decimal(10, 2)
  notes             String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  items             OrderItem[] @relation("OrderToOrderItem")
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  shipping          OrderShipping?

  @@unique([userId, orderNumber])
  @@unique([userId, marketplace, marketplaceKey])
}

model OrderItem {
  id             String     @id @default(cuid())
  orderId        String
  sku            String?
  productName    String?
  variantInfo    String?
  quantity       Int
  unitPrice      Decimal?   @db.Decimal(10, 2)
  totalPrice     Decimal?   @db.Decimal(10, 2)
  notes          String?
  image          String?
  shipBy         DateTime?
  marketplaceKey String?
  orderNumber    String?
  uniqueLineKey  String?
  order          Order      @relation("OrderToOrderItem", fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([sku])
}

model LabelJob {
  id             String    @id @default(cuid())
  orderItemId    String
  carrier        String
  status         String
  pdfUrl         String?
  trackingNumber String?
  errorMessage   String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  // Removed relation to OrderItem since orderItemId is not present in OrderItem
}

model Product {
  id                  String               @id @default(cuid())
  sku                 String
  name                String
  description         String?
  price               Decimal              @db.Decimal(10, 2)
  cost                Decimal?             @db.Decimal(10, 2)
  weight              Float?
  dimensions          Json?
  imageUrl            String?
  active              Boolean              @default(true)
  userId              String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  inventories         Inventory[]
  marketplaceProducts MarketplaceProduct[]
  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, sku])
}

model Inventory {
  id           String   @id @default(cuid())
  productId    String
  location     String   @default("default")
  quantity     Int      @default(0)
  reorderLevel Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  product      Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, location])
}

model MarketplaceProduct {
  id              String   @id @default(cuid())
  productId       String
  marketplace     String
  marketplaceId   String
  marketplaceData Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  product         Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([marketplace, marketplaceId])
}

model UserIntegrationSettings {
  id                 String   @id @default(cuid())
  userId             String   @unique
  veeqoApiKey        String?
  shippoToken        String?
  fedexApiKey        String?
  fedexApiSecret     String?
  fedexAccountNumber String?
  fedexMeterNumber   String?
  trendyolSupplierId String?
  trendyolApiKey     String?
  trendyolApiSecret  String?
  hepsiburadaMerchantId String?
  hepsiburadaApiKey  String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ShipperProfile {
  id                  String   @id @default(uuid())
  userId              String   @unique
  shipperName         String?
  shipperPersonName   String?
  shipperPhoneNumber  String?
  shipperStreet1      String?
  shipperStreet2      String?
  shipperCity         String?
  shipperStateCode    String?
  shipperPostalCode   String?
  shipperCountryCode  String?
  shipperTinNumber    String?
  importerOfRecord    String?
  fedexFolderId       String?
  defaultCurrencyCode String?
  dutiesPaymentType   String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
